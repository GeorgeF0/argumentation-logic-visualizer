/* description: Grammar for propositional logic. */

%lex
%%

\s+                {/* skip whitespace */}

"&I"               {return '&I';}
"&E"               {return '&E';}
"|I"               {return '|I';}
"|E"               {return '|E';}
"->I"              {return '->I';}
"->E"              {return '->E';}
"_I"               {return '_I';}
"_E"               {return '_E';}
"!I"               {return '!I';}
"!E"               {return '!E';}
"hypothesis"       {return 'hypothesis';}

[a-z][a-zA-Z0-9]*  {return 'IDENT';}
"->"               {return '->';}
"|"                {return '|';}
"&"                {return '&';}
"!"                {return '!';}
"("                {return '(';}
")"                {return ')';}
"_"                {return '_';}

","                {return ',';}
[0-9]+             {return 'NUM';}
"-"                {return '-';}
";"                {return ';';}

<<EOF>>            {return 'EOF';}

/lex

%left ','
%left '->'
%left '|'
%left '&'
%left '!'

%%

S
    : e EOF
        {return ['formula', $1];}
    | l EOF
        {return ['list', $1];}
    | c EOF
        {return ['command', $1];}
    ;

and
    : e '&' e
        {$$ = ['and', $1, $3];}
    ;

or
    : e '|' e
        {$$ = ['or', $1, $3];}
    ;

implies
    : e '->' e
        {$$ = ['implies', $1, $3];}
    ;

not
    : '!' e
        {$$ = ['n', $2];}
    ;

e
    : '(' e ')'
        {$$ = $2;}
    | implies
        {$$ = $1;}
    | not
        {$$ = $1;}
    | or
        {$$ = $1;}
    | and
        {$$ = $1;}
    | '_'
        {$$ = 'falsity';}
    | IDENT
        {$$ = yytext;}
    ;

l
    : e ',' e
        {$$ = [[$1], $3];}
    | l ',' e
        {$$ = [$1, $3];}
    ;

c
    : e ';' r2 '(' NUM ',' NUM ')'
        {$$ = [$1, [$3, parseInt($5), parseInt($7)]];}
    | e ';' r1 '(' NUM ')'
        {$$ = [$1, [$3, parseInt($5)]];}
    | e ';' 'hypothesis'
        {$$ = [$1, [$3]];}
    | '-' '-'
        {$$ = ['--'];}
    | '-' NUM
        {$$ = ['-', parseInt($2)];}
    ;

r4  : '|E'
        {$$ = 'orE';}
    ;

r2
    : '&I'
        {$$ = 'andI';}
    | '|I'
        {$$ = 'orI';}
    | '!I'
        {$$ = 'notI';}
    | '->I'
        {$$ = 'impliesI';}
    | '->E'
        {$$ = 'impliesE';}
    | '_I'
        {$$ = 'falsityI';}
    ;

r1
    : '&E'
        {$$ = 'andE';}
    | '!E'
        {$$ = 'notE';}
    | '_E'
        {$$ = 'falsityE';}
    ;
